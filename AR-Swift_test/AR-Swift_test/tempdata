
//
//  ArtTreeViewController.swift
//  AR-Swift_test
//
//  Created by niexiaobo on 2017/11/16.
//  Copyright © 2017年 niexiaobo. All rights reserved.
//

import UIKit
//引入ARkit所需的包
import ARKit
//引入 SceneKit
import SceneKit
class ArtTreeViewController: UIViewController,ARSCNViewDelegate {
//必备
let arSCNView = ARSCNView()
let arSession = ARSession()
let arConfiguration = ARWorldTrackingConfiguration()

var arIndex = 0
//图
let ArtPicNode = SCNNode()

let ArtPicHaloNode = SCNNode()//光晕


//add
@IBOutlet weak var sceneV: ARSCNView!
@IBOutlet weak var InfoL: UILabel!//这个label的命名大家不要介意,手残了
@IBOutlet weak var targetIM: UIImageView!

var session = ARSession()
var configuration = ARWorldTrackingConfiguration()
var isMeasuring = false//默认状态为非测量状态

var vectorZero = SCNVector3() // 0,0,0
var vectorStart = SCNVector3()
var vectorEnd = SCNVector3()
var lines = [Line]()
var currentLine: Line?
var unit = LengthUnit.cenitMeter // 默认单位 cm



override func viewWillAppear(_ animated: Bool) {
super.viewWillAppear(animated)

arConfiguration.isLightEstimationEnabled = true//自适应灯光（室內到室外的話 畫面會比較柔和）
arSession.run(arConfiguration, options: [.removeExistingAnchors,.resetTracking])
}
override func viewWillDisappear(_ animated: Bool) {
super.viewWillDisappear(animated)
// Pause the view's session
arSession.pause()
}

override func viewDidLoad() {
super.viewDidLoad()

self.view.backgroundColor = UIColor.white;
self.setUp()
}


func showPic() {
//设置arSCNView属性
arSCNView.frame = self.view.frame

arSCNView.session = arSession
arSCNView.automaticallyUpdatesLighting = true//自动调节亮度

self.view.addSubview(arSCNView)
arSCNView.delegate = self

self.initNode()
self.addLight()
for i in 0..<6{
self.addBtns(index: i)
}
}
//MARK:初始化节点信息
func initNode()  {
//1.设置几何
//ArtPicNode.geometry = SCNSphere(radius: 3) //球形
//图片
var boxW: CGFloat = 0.5
var boxH: CGFloat = 0.5
let boxL: CGFloat = 0.01
if self.arIndex == 0 {
boxH = 0.5
} else if self.arIndex == 1 {
boxH = 0.6
} else if self.arIndex == 2 {
boxW = 1
}

//创建一个长方体,用来展示图片
ArtPicNode.geometry = SCNBox.init(width: boxW, height: boxH, length: boxL, chamferRadius: 0.1) //方形

let imageA =  ["timgKuang.jpg","timg2kuang.jpg","timg3Kuang.jpg"];

ArtPicNode.geometry?.firstMaterial?.diffuse.contents = imageA[self.arIndex]
ArtPicNode.geometry?.firstMaterial?.multiply.intensity = 0.5 //強度
ArtPicNode.geometry?.firstMaterial?.lightingModel = SCNMaterial.LightingModel.constant


//3.设置位置
ArtPicNode.position = SCNVector3(0, 0.5, -2)
//添加长方体到界面上
self.arSCNView.scene.rootNode.addChildNode(ArtPicNode)

}


func addLight() {

let lightNode = SCNNode()
lightNode.light = SCNLight()
lightNode.light?.color = UIColor.red //被光找到的地方颜色

ArtPicNode.addChildNode(lightNode)
lightNode.light?.attenuationEndDistance = 20.0 //光照的亮度随着距离改变
lightNode.light?.attenuationStartDistance = 1.0
SCNTransaction.begin()
SCNTransaction.animationDuration = 1
lightNode.light?.color =  UIColor.white
lightNode.opacity = 0.5 // make the halo stronger

SCNTransaction.commit()
ArtPicHaloNode.geometry = SCNPlane.init(width: 25, height: 25)

ArtPicHaloNode.rotation = SCNVector4Make(1, 0, 0, Float(0 * Double.pi / 180.0))
ArtPicHaloNode.geometry?.firstMaterial?.diffuse.contents = "sun-halo.png"
ArtPicHaloNode.geometry?.firstMaterial?.lightingModel = SCNMaterial.LightingModel.constant // no lighting
ArtPicHaloNode.geometry?.firstMaterial?.writesToDepthBuffer = false // 不要有厚度，看起来薄薄的一层
ArtPicHaloNode.opacity = 5
ArtPicHaloNode.addChildNode(ArtPicHaloNode)
}


func addBtns(index: NSInteger) {

let colorA = [UIColor.red,UIColor.green,UIColor.blue,UIColor.orange,UIColor.purple,UIColor.red,UIColor.purple];
let titleA = ["左","上","下","右","前","后","添加"];

let btnW = self.view.frame.size.width/6.0;
let btnH = 50.0;
var org_x = 0.0;
var org_y = self.view.frame.size.height - 50.0;
if (index == 0) {//左
org_x = Double(btnW * 1.5);
org_y = self.view.frame.size.height - 100;
} else if (index == 1) {//上
org_x = Double(btnW * 2.5);
org_y = self.view.frame.size.height - 150;
} else if (index == 2) {//下
org_x = Double(btnW * 2.5);
org_y = self.view.frame.size.height - 50;
} else if (index == 3) {//右
org_x = Double(btnW * 3.5);
org_y = self.view.frame.size.height - 100;
} else if (index == 4) {//前
org_x = 15;
org_y = self.view.frame.size.height - 100;
} else if (index == 5) {//后
org_x = Double(self.view.frame.size.width - btnW - 15.0);
org_y = self.view.frame.size.height - 100;
} else if (index == 6) {//add
org_x = Double(btnW * 2.5);
org_y = self.view.frame.size.height - 100;
}

//创建一个ContactAdd类型的按钮
let button:UIButton = UIButton(type:.contactAdd)
//设置按钮位置和大小
button.frame = CGRect(x: CGFloat(org_x), y: CGFloat(org_y), width: CGFloat(btnW), height: CGFloat(btnH))
//设置按钮文字
button.setTitle(titleA[index], for:.normal)
button.setTitleColor(UIColor.white, for: .normal) //普通状态下文字的颜色
//传递触摸对象（即点击的按钮），需要在定义action参数时，方法名称后面带上冒号
button.addTarget(self, action:#selector(tapped(_:)), for:.touchUpInside)
button.tag = index
button.backgroundColor = colorA[index]
self.view.addSubview(button)

}

@objc func tapped(_ button:UIButton){

var vector = SCNVector3.init()
vector = ArtPicNode.position

let dat: Float = 0.1

if (button.tag == 0) {
vector.x = vector.x - dat
} else if (button.tag == 1) {
vector.y += dat
} else if (button.tag == 2) {
vector.y -= dat
} else if (button.tag == 3) {
vector.x+=dat
} else if (button.tag == 4) {
vector.z-=dat
} else if (button.tag == 5) {
vector.z+=dat
}
ArtPicNode.position = vector;

}

func distance(form vector:SCNVector3) -> Float {
let distanceX = ArtPicNode.position.x - vector.x
let distanceY = ArtPicNode.position.y - vector.y
let distanceZ = ArtPicNode.position.z - vector.z

return sqrt((distanceX * distanceX) + (distanceY * distanceY) + (distanceZ * distanceZ))
}


//add

func setUp()  {

sceneV.delegate = self
sceneV.session = session
InfoL.text = "环境初始化中"

}


@IBOutlet weak var restB: UIButton!

@IBAction func ResetClick(_ sender: UIButton) {

for line in lines {
line.remove()
}
lines.removeAll()

}
func reset(){
isMeasuring = true
vectorStart = SCNVector3()
vectorEnd = SCNVector3()
}
func scanWorld(){
//相机位置
guard let worldPosition = sceneV.worldVector(for: view.center) else {
return
}
if  lines.isEmpty {
InfoL.text = "点击画面试试看"
}
if isMeasuring {
//            开始点
if  vectorStart == vectorZero {
vectorStart = worldPosition //  把现在的位置何止为开始
currentLine = Line(sceneView: sceneV, startVector: vectorStart, unit: unit)
}
//            设置结束
vectorEnd = worldPosition
currentLine?.update(to: vectorEnd)
InfoL.text = currentLine?.distance(to: vectorEnd) ?? "..."
}
}

@IBAction func UnitClick(_ sender: Any) {
print("UnitClick")
}
override func didReceiveMemoryWarning() {
super.didReceiveMemoryWarning()
// Dispose of any resources that can be recreated.
}
//点击屏幕开始测试
override func touchesBegan(_ touches: Set<UITouch>, with event: UIEvent?) {
if !isMeasuring {
reset()
isMeasuring = true
targetIM.image = UIImage(named: "GreenTarget")
}else{
isMeasuring = false
if let line = currentLine {
lines.append(line)
currentLine = nil
targetIM.image = UIImage(named: "WhiteTarget")
}
}
}

}

extension ArtTreeViewController {

func renderer(_ renderer: SCNSceneRenderer, updateAtTime time: TimeInterval) {

DispatchQueue.main.async {
self.scanWorld()
}

}

func session(_ session: ARSession, didFailWithError error: Error) {

InfoL.text = "错误"
}

func sessionWasInterrupted(_ session: ARSession) {

InfoL.text = "中断～"
}

func sessionInterruptionEnded(_ session: ARSession) {

InfoL.text = "结束"
}
}
